package com.paypal.dao;

import java.io.File;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

import com.paypal.controller.PaymentServlet;
import com.paypal.core.ConfigManager;
import com.paypal.core.LoggingManager;
import com.paypal.util.AppConstants;

/**
 * <code>DBConnection</code> manages connections for the sample application. It
 * is a minimalist implementation for a single database connection. Real world
 * applications are not recommended to use this and should have a more robust
 * approach.
 * 
 * @author tkanta
 * 
 */
public class DBConnection {

	// Private sole connection object
	private static Connection con;

	// Initialize the table during application start-up
	static {
		try {
			Class.forName("org.hsqldb.jdbc.JDBCDriver");
		} catch (ClassNotFoundException e) {
			LoggingManager.severe(DBConnection.class, e.getMessage(), e);
		}
		try {
			
			//Database path
			String dbPath = System.getProperty("user.home") + File.separator + AppConstants.DBNAME;
			
			// Initialize the connection
			con = DriverManager
					.getConnection("jdbc:hsqldb:file:" + dbPath + ";user=SA;create=true");
			con.createStatement()
					.executeUpdate(
							"CREATE TABLE ppusers (userid INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1) not null,email VARCHAR(20),password VARCHAR(200),creditcard_id VARCHAR(40))");
			con.createStatement()
					.executeUpdate(
							"CREATE TABLE orders (order_id INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1) not null, user_id INTEGER,payment_id VARCHAR(60),amount VARCHAR(20),state VARCHAR(20),date VARCHAR(30),description VARCHAR(80))");

		} catch (SQLException e) {
			LoggingManager.severe(DBConnection.class, e.getMessage(), e);
		}
	}

	// Private constructor
	private DBConnection() {
	}

	/**
	 * Returns the only connection to database
	 * 
	 * @return {@link Connection}
	 */
	public static Connection getConnection() {
		return con;
	}
}
